{"remainingRequest":"D:\\Work\\jianpanHt\\jpqt\\node_modules\\babel-loader\\lib\\index.js!D:\\Work\\jianpanHt\\jpqt\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\Work\\jianpanHt\\jpqt\\src\\main.js","dependencies":[{"path":"D:\\Work\\jianpanHt\\jpqt\\src\\main.js","mtime":1591608111658},{"path":"D:\\Work\\jianpanHt\\jpqt\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Work\\jianpanHt\\jpqt\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Work\\jianpanHt\\jpqt\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"D:\\\\Work\\\\jianpanHt\\\\jpqt\\\\node_modules\\\\core-js\\\\modules\\\\es6.array.iterator.js\";\nimport \"D:\\\\Work\\\\jianpanHt\\\\jpqt\\\\node_modules\\\\core-js\\\\modules\\\\es6.promise.js\";\nimport \"D:\\\\Work\\\\jianpanHt\\\\jpqt\\\\node_modules\\\\core-js\\\\modules\\\\es6.object.assign.js\";\nimport \"D:\\\\Work\\\\jianpanHt\\\\jpqt\\\\node_modules\\\\core-js\\\\modules\\\\es7.promise.finally.js\";\nimport Vue from 'vue';\nimport App from \"./App.vue\";\nimport router from \"./router/index\";\nimport store from \"./store/index\"; // 引入字体库\n\nimport 'font-awesome/css/font-awesome.min.css'; // 引入 Element-Ui\n\nimport ElementUI from 'element-ui';\nimport 'element-ui/lib/theme-chalk/index.css';\nVue.use(ElementUI); // 引入封装的请求\n\nimport { getRequest, getRequestWithParams, postRequest, postDownload, postRequestByForm, deleteRequest, putRequest, uploadFileRequest } from \"./utils/api\"; //注入到vue对象，在项目可直接使用\n\nVue.prototype.getRequest = getRequest;\nVue.prototype.getRequestWithParams = getRequestWithParams;\nVue.prototype.postRequest = postRequest;\nVue.prototype.postDownload = postDownload;\nVue.prototype.postRequestByForm = postRequestByForm;\nVue.prototype.deleteRequest = deleteRequest;\nVue.prototype.putRequest = putRequest;\nVue.prototype.uploadFileRequest = uploadFileRequest;\nimport { initMenu } from \"./utils/utils\";\nVue.config.productionTip = false;\n/**\r\n * 问题：为什么在这里使用“路由导航卫视”？\r\n * 原因：\r\n *     这个问题的核心就在于“数据请求时机”。\r\n *     可能会有小伙伴说这有何难，登录成功之后请求不就可以了吗？是的，登录成功之后，请求菜单资源是可以的，\r\n * 请求到之后，我们将之保存在store中，以便下一次使用，但是这样又会有另外一个问题，假如用户登录成功之后，\r\n * 点击某一个子页面，进入到子页面中，然后按了一下F5进行刷新，这个时候就GG了，因为F5刷新之后store中的数\r\n * 据就没了，而我们又只在登录成功的时候请求了一次菜单资源，要解决这个问题，有两种思路：\r\n *     1.将菜单资源不要保存到store中，而是保存到localStorage中，这样即使F5刷新之后数据还在；\r\n *     2.直接在每一个页面的mounted方法中，都去加载一次菜单资源。\r\n *     由于菜单资源是非常敏感的，因此最好不要不要将其保存到本地，故舍弃方案1，但是方案2的工作量有点大，\r\n * 因此我采取办法将之简化，采取的办法就是使用路由中的导航守卫。\r\n * \r\n * 补充知识点：\r\n * 问题：为什么按F5刷新后，store中的数据就没了？\r\n * 原因：因为 Vue 是单页面应用，它会一次性将所有模块的数据请求好，这样在页面跳转时，将无需再次发起网络请求。\r\n *       而当我们按F5刷新时，相当于将所有组件重新加载一遍，这样就会重新初始化 store 中 state 数据。\r\n */\n\nrouter.beforeEach(function (to, from, next) {\n  // 若去登录页面，直接过\n  if (to.name == 'Login') {\n    next();\n    return;\n  }\n  /**\r\n   * 若不是去登录页面，先从 store 中获取当前的登录状态：\r\n   * 若未登录，则通过路由的 meta 属性的requireAuth 属性判断要去的页面是否需要登陆：\r\n   *  若需要登录，则跳回登录页面，同时将要去的页面（to.path）作为参数传递给登录页面，以便在登录成功之后跳转到目标页面;\r\n   *  若不需要登录，则直接过（事实上，本项目只有Login页面不需要登录）。\r\n   * 若已经登录了，则先初始化菜单，再跳转。\r\n   */\n\n\n  var user_name = store.state.user.name;\n\n  if (user_name == '未登录') {\n    if (to.meta.requireAuth || to.name == null) {\n      next({\n        path: '/',\n        query: {\n          redirect: to.path\n        }\n      });\n    } else {\n      next();\n    }\n  } else {\n    initMenu(router, store); // 处理聊天逻辑（后面再加）\n\n    next();\n  }\n});\nnew Vue({\n  router: router,\n  store: store,\n  render: function render(h) {\n    return h(App);\n  }\n}).$mount('#app'); // 使用quill富文本编辑器\n\nimport VueQuillEditor from 'vue-quill-editor';\nimport 'quill/dist/quill.core.css';\nimport 'quill/dist/quill.snow.css';\nimport 'quill/dist/quill.bubble.css';\nVue.use(VueQuillEditor);",{"version":3,"sources":["D:\\Work\\jianpanHt\\jpqt\\src\\main.js"],"names":["Vue","App","router","store","ElementUI","use","getRequest","getRequestWithParams","postRequest","postDownload","postRequestByForm","deleteRequest","putRequest","uploadFileRequest","prototype","initMenu","config","productionTip","beforeEach","to","from","next","name","user_name","state","user","meta","requireAuth","path","query","redirect","render","h","$mount","VueQuillEditor"],"mappings":";;;;;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,GAAP;AACA,OAAOC,MAAP;AACA,OAAOC,KAAP,sB,CACA;;AACA,OAAO,uCAAP,C,CAEA;;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,sCAAP;AACAJ,GAAG,CAACK,GAAJ,CAAQD,SAAR,E,CAEA;;AACA,SAASE,UAAT,EAAqBC,oBAArB,EAA2CC,WAA3C,EAAwDC,YAAxD,EAAsEC,iBAAtE,EAAyFC,aAAzF,EAAwGC,UAAxG,EAAoHC,iBAApH,sB,CACA;;AACAb,GAAG,CAACc,SAAJ,CAAcR,UAAd,GAA2BA,UAA3B;AACAN,GAAG,CAACc,SAAJ,CAAcP,oBAAd,GAAqCA,oBAArC;AACAP,GAAG,CAACc,SAAJ,CAAcN,WAAd,GAA4BA,WAA5B;AACAR,GAAG,CAACc,SAAJ,CAAcL,YAAd,GAA6BA,YAA7B;AACAT,GAAG,CAACc,SAAJ,CAAcJ,iBAAd,GAAkCA,iBAAlC;AACAV,GAAG,CAACc,SAAJ,CAAcH,aAAd,GAA8BA,aAA9B;AACAX,GAAG,CAACc,SAAJ,CAAcF,UAAd,GAA2BA,UAA3B;AACAZ,GAAG,CAACc,SAAJ,CAAcD,iBAAd,GAAkCA,iBAAlC;AAEA,SAASE,QAAT;AAGAf,GAAG,CAACgB,MAAJ,CAAWC,aAAX,GAA2B,KAA3B;AACA;;;;;;;;;;;;;;;;;;;AAkBAf,MAAM,CAACgB,UAAP,CAAkB,UAACC,EAAD,EAAKC,IAAL,EAAWC,IAAX,EAAoB;AACpC;AACA,MAAIF,EAAE,CAACG,IAAH,IAAW,OAAf,EAAwB;AACtBD,IAAAA,IAAI;AACJ;AACD;AACD;;;;;;;;;AAOA,MAAIE,SAAS,GAAGpB,KAAK,CAACqB,KAAN,CAAYC,IAAZ,CAAiBH,IAAjC;;AACA,MAAIC,SAAS,IAAI,KAAjB,EAAwB;AACtB,QAAIJ,EAAE,CAACO,IAAH,CAAQC,WAAR,IAAuBR,EAAE,CAACG,IAAH,IAAW,IAAtC,EAA4C;AAC1CD,MAAAA,IAAI,CAAC;AACHO,QAAAA,IAAI,EAAE,GADH;AAEHC,QAAAA,KAAK,EAAE;AACLC,UAAAA,QAAQ,EAAEX,EAAE,CAACS;AADR;AAFJ,OAAD,CAAJ;AAMD,KAPD,MAOO;AACLP,MAAAA,IAAI;AACL;AACF,GAXD,MAWO;AACLN,IAAAA,QAAQ,CAACb,MAAD,EAASC,KAAT,CAAR,CADK,CAEL;;AAEAkB,IAAAA,IAAI;AACL;AACF,CA/BD;AAiCA,IAAIrB,GAAJ,CAAQ;AACNE,EAAAA,MAAM,EAANA,MADM;AAENC,EAAAA,KAAK,EAALA,KAFM;AAGN4B,EAAAA,MAAM,EAAE,gBAAAC,CAAC;AAAA,WAAIA,CAAC,CAAC/B,GAAD,CAAL;AAAA;AAHH,CAAR,EAIGgC,MAJH,CAIU,MAJV,E,CAKA;;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAO,2BAAP;AACA,OAAO,2BAAP;AACA,OAAO,6BAAP;AAEAlC,GAAG,CAACK,GAAJ,CAAQ6B,cAAR","sourcesContent":["import Vue from 'vue'\r\nimport App from './App.vue'\r\nimport router from './router/index'\r\nimport store from './store/index'\r\n// 引入字体库\r\nimport 'font-awesome/css/font-awesome.min.css'\r\n\r\n// 引入 Element-Ui\r\nimport ElementUI from 'element-ui'\r\nimport 'element-ui/lib/theme-chalk/index.css'\r\nVue.use(ElementUI)\r\n\r\n// 引入封装的请求\r\nimport { getRequest, getRequestWithParams, postRequest, postDownload, postRequestByForm, deleteRequest, putRequest, uploadFileRequest } from './utils/api'\r\n//注入到vue对象，在项目可直接使用\r\nVue.prototype.getRequest = getRequest\r\nVue.prototype.getRequestWithParams = getRequestWithParams\r\nVue.prototype.postRequest = postRequest\r\nVue.prototype.postDownload = postDownload\r\nVue.prototype.postRequestByForm = postRequestByForm\r\nVue.prototype.deleteRequest = deleteRequest\r\nVue.prototype.putRequest = putRequest\r\nVue.prototype.uploadFileRequest = uploadFileRequest\r\n\r\nimport { initMenu } from './utils/utils'\r\n\r\n\r\nVue.config.productionTip = false\r\n/**\r\n * 问题：为什么在这里使用“路由导航卫视”？\r\n * 原因：\r\n *     这个问题的核心就在于“数据请求时机”。\r\n *     可能会有小伙伴说这有何难，登录成功之后请求不就可以了吗？是的，登录成功之后，请求菜单资源是可以的，\r\n * 请求到之后，我们将之保存在store中，以便下一次使用，但是这样又会有另外一个问题，假如用户登录成功之后，\r\n * 点击某一个子页面，进入到子页面中，然后按了一下F5进行刷新，这个时候就GG了，因为F5刷新之后store中的数\r\n * 据就没了，而我们又只在登录成功的时候请求了一次菜单资源，要解决这个问题，有两种思路：\r\n *     1.将菜单资源不要保存到store中，而是保存到localStorage中，这样即使F5刷新之后数据还在；\r\n *     2.直接在每一个页面的mounted方法中，都去加载一次菜单资源。\r\n *     由于菜单资源是非常敏感的，因此最好不要不要将其保存到本地，故舍弃方案1，但是方案2的工作量有点大，\r\n * 因此我采取办法将之简化，采取的办法就是使用路由中的导航守卫。\r\n * \r\n * 补充知识点：\r\n * 问题：为什么按F5刷新后，store中的数据就没了？\r\n * 原因：因为 Vue 是单页面应用，它会一次性将所有模块的数据请求好，这样在页面跳转时，将无需再次发起网络请求。\r\n *       而当我们按F5刷新时，相当于将所有组件重新加载一遍，这样就会重新初始化 store 中 state 数据。\r\n */\r\nrouter.beforeEach((to, from, next) => {\r\n  // 若去登录页面，直接过\r\n  if (to.name == 'Login') {\r\n    next()\r\n    return\r\n  }\r\n  /**\r\n   * 若不是去登录页面，先从 store 中获取当前的登录状态：\r\n   * 若未登录，则通过路由的 meta 属性的requireAuth 属性判断要去的页面是否需要登陆：\r\n   *  若需要登录，则跳回登录页面，同时将要去的页面（to.path）作为参数传递给登录页面，以便在登录成功之后跳转到目标页面;\r\n   *  若不需要登录，则直接过（事实上，本项目只有Login页面不需要登录）。\r\n   * 若已经登录了，则先初始化菜单，再跳转。\r\n   */\r\n  var user_name = store.state.user.name;\r\n  if (user_name == '未登录') {\r\n    if (to.meta.requireAuth || to.name == null) {\r\n      next({\r\n        path: '/',\r\n        query: {\r\n          redirect: to.path\r\n        }\r\n      })\r\n    } else {\r\n      next()\r\n    }\r\n  } else {\r\n    initMenu(router, store)\r\n    // 处理聊天逻辑（后面再加）\r\n\r\n    next()\r\n  }\r\n})\r\n\r\nnew Vue({\r\n  router,\r\n  store,\r\n  render: h => h(App)\r\n}).$mount('#app')\r\n// 使用quill富文本编辑器\r\nimport VueQuillEditor from 'vue-quill-editor'\r\nimport 'quill/dist/quill.core.css'\r\nimport 'quill/dist/quill.snow.css'\r\nimport 'quill/dist/quill.bubble.css'\r\n\r\nVue.use(VueQuillEditor);"]}]}